import { FieldHook } from 'payload'

export const sendToTelegramHook: FieldHook = async ({
  data,
  originalDoc,
  value,
}) => {
  // Only trigger if the field value is being set to 'send'
  if (value === 'send' && originalDoc) {
    try {
      const adminUrl =
        process.env.NEXT_PUBLIC_APP_URL ||
        process.env.PAYLOAD_PUBLIC_SERVER_URL ||
        'https://formnorm.ru'

      const botToken = process.env.TELEGRAM_BOT_TOKEN
      const adminChatId = process.env.TELEGRAM_CHAT_ID
      const clientChatId = originalDoc.contactInfo?.telegramChatId

      // Get the PDF URL if the file exists
      let pdfUrl = ''
      if (originalDoc.url) {
        pdfUrl = `${adminUrl}${originalDoc.url}`
      }

      // Send to admin
      if (adminChatId && botToken) {
        await sendTelegramMessage({
          botToken,
          chatId: adminChatId,
          title: 'üìÑ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É',
          data: {
            '–†–∞—Å—á–µ—Ç ‚Ññ': originalDoc.calculationNumber || '–ù/–î',
            '–ö–ª–∏–µ–Ω—Ç': originalDoc.clientName || '–ù–µ —É–∫–∞–∑–∞–Ω',
            '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç': clientChatId || '–ù–µ —É–∫–∞–∑–∞–Ω',
            'adminLink': `${adminUrl}/admin/collections/calculator-results/${originalDoc.id}`,
          },
          pdfUrl,
        })
      }

      // Send to client if they have a Telegram chat ID
      if (clientChatId && botToken) {
        await sendTelegramMessage({
          botToken,
          chatId: clientChatId,
          title: '–í–∞—à —Ä–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤!',
          data: {
            '–ù–æ–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞': originalDoc.calculationNumber || '–ù/–î',
            '–ü–ª–æ—â–∞–¥—å': `${originalDoc.calculationSummary?.area || 0} –º¬≤`,
            '–°—Ç–æ–∏–º–æ—Å—Ç—å': `${originalDoc.calculationSummary?.totalCost || 0} ‚ÇΩ`,
          },
          pdfUrl,
          isClient: true,
        })
      }

      console.log('PDF sent to Telegram successfully')
      // Return null to not actually save this value
      return null
    } catch (error) {
      console.error('Failed to send PDF to Telegram:', error)
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram')
    }
  }

  return null
}

// Helper function to send Telegram messages
async function sendTelegramMessage({
  botToken,
  chatId,
  title,
  data,
  pdfUrl,
  isClient = false,
}: {
  botToken: string
  chatId: string
  title: string
  data: Record<string, any>
  pdfUrl?: string
  isClient?: boolean
}) {
  // Format message
  let message = `*üîî ${title}*\n\n`

  let adminLink = ''
  Object.entries(data).forEach(([key, value]) => {
    if (key === 'adminLink' && value) {
      adminLink = value
      return
    }
    message += `*${key}:* ${value}\n`
  })

  if (adminLink && !isClient) {
    message += `\n[üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É](${adminLink})`
  }

  // Send text message
  const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: message,
      parse_mode: 'Markdown',
      disable_web_page_preview: true,
    }),
  })

  const result = await response.json()
  if (!result.ok) {
    throw new Error(`Telegram API error: ${result.description}`)
  }

  // Send PDF if available
  if (pdfUrl) {
    await fetch(`https://api.telegram.org/bot${botToken}/sendDocument`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        document: pdfUrl,
        caption: isClient ? 'üìÑ –í–∞—à —Ä–∞—Å—á–µ—Ç –≤ PDF —Ñ–æ—Ä–º–∞—Ç–µ' : 'üìÑ PDF –¥–æ–∫—É–º–µ–Ω—Ç',
      }),
    })
  }
}
