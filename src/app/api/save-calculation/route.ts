import { NextRequest, NextResponse } from 'next/server'
import { getPayload } from 'payload'
import config from '@payload-config'
import { generatePDFWithReactPDF } from '@/utils/CalculationPDF'

export async function POST(request: NextRequest) {
  try {
    const payload = await getPayload({ config })
    const data = await request.json()

    console.log('API: Processing calculation with area:', data.area)

    const tempCalculationNumber = `TEMP-${Date.now()}`

    const pdfBuffer = await generatePDFWithReactPDF({
      calculations: {
        area: data.area,
        totalCost: data.totalCost,
        pricePerM2: data.pricePerM2,
        generalItems: data.generalItems || [],
        elementItems: data.elementItems || [],
      },
      formData: {
        selectedFloor: data.selectedFloor,
      },
      config: data.config || {},
      calculationNumber: tempCalculationNumber,
    })

    const calculationData = {
      // calculationNumber will be generated by Payload hook
      clientName: data.clientName || '',
      contactInfo: {
        email: data.clientEmail || '',
        phone: data.clientPhone || '',
      },
      metadata: {
        // User input data for record keeping
        formData: {
          area: data.area,
          selectedFloor: data.selectedFloor,
          selectedServices: data.selectedServices || [],
          selectedElements: data.selectedElements || [],
          serviceOptions: data.serviceOptions || {},
          selectedRadioValues: data.selectedRadioValues || {},
        },
        // Calculation results (without coefficients)
        calculations: {
          area: data.area,
          generalItems: data.generalItems || [],
          elementItems: data.elementItems || [],
          totalCost: data.totalCost,
          pricePerM2: data.pricePerM2,
        },
        // Keep config for PDF generation
        config: data.config || {},
        timestamp: new Date().toISOString(),
      },
    }

    // Create the file object for upload
    const file = {
      data: pdfBuffer,
      mimetype: 'application/pdf',
      name: `calculation-temp.pdf`, // Will be renamed after getting real calculation number
      size: pdfBuffer.length,
    }

    // Save to database with PDF file
    const result = await payload.create({
      collection: 'calculator-results',
      data: calculationData,
      file,
    })

    console.log('Calculation result saved with ID:', result.id)

    // If we have the real calculation number now, regenerate the PDF with correct number
    if (result.calculationNumber && result.calculationNumber !== tempCalculationNumber) {
      try {
        console.log('Regenerating PDF with correct calculation number...')
        const correctPdfBuffer = await generatePDFWithReactPDF({
          calculations: {
            area: data.area,
            totalCost: data.totalCost,
            pricePerM2: data.pricePerM2,
            generalItems: data.generalItems || [],
            elementItems: data.elementItems || [],
          },
          formData: {
            selectedFloor: data.selectedFloor,
          },
          config: data.config || {},
          calculationNumber: result.calculationNumber,
        })

        // Update with correct PDF
        const updatedResult = await payload.update({
          collection: 'calculator-results',
          id: result.id,
          data: {},
          file: {
            data: correctPdfBuffer,
            mimetype: 'application/pdf',
            name: `calculation-${result.calculationNumber}.pdf`,
            size: correctPdfBuffer.length,
          },
        })

        return NextResponse.json({
          success: true,
          id: updatedResult.id,
          calculationNumber: updatedResult.calculationNumber,
        })
      } catch (updateError) {
        console.error('Error updating PDF with correct number:', updateError)
        // Still return success but with original result
      }
    }

    return NextResponse.json({
      success: true,
      id: result.id,
      calculationNumber: result.calculationNumber,
    })
  } catch (error) {
    console.error('API: Error saving calculation result:', {
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      type: typeof error,
    })
    return NextResponse.json(
      {
        success: false,
        error: 'Failed to save calculation result',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 },
    )
  }
}
