// src/app/api/telegram/webhook/route.ts

import { NextRequest, NextResponse } from 'next/server'

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('Received webhook:', body)

    // Check if this is a /start command
    if (body.message?.text?.startsWith('/start')) {
      const chatId = body.message.chat.id
      const userName = body.message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      const startParam = body.message.text.split(' ')[1] // Gets parameter after /start

      // Check if there's a calculation ID parameter
      if (startParam && startParam.startsWith('calc_')) {
        // Extract calculation ID
        const calculationId = startParam.replace('calc_', '')

        // Send initial message
        await sendMessage(
          chatId,
          `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}! üëã\n\n–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞...`,
        )

        try {
          // Fetch calculation from database
          const baseUrl = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'
          const response = await fetch(`${baseUrl}/api/calculator-results/${calculationId}`)

          if (!response.ok) {
            await sendMessage(chatId, '‚ùå –†–∞—Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            return NextResponse.json({ ok: true })
          }

          const result = await response.json()

          // Extract data from the calculation
          const metadata = result.metadata || {}
          const calculations = metadata.calculations || {}
          const formData = metadata.formData || {}
          const config = metadata.config || {}
          const currency = config.currency || '‚ÇΩ'

          // Send calculation details
          const message =
            `üìä <b>–†–∞—Å—á–µ—Ç ‚Ññ${result.calculationNumber}</b>\n\n` +
            `üìê <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n` +
            `‚Ä¢ –ü–ª–æ—â–∞–¥—å: ${calculations.area || 0} –º¬≤\n` +
            `‚Ä¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å: ${formData.selectedFloor || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
            `üí∞ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n` +
            `‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –º¬≤: ${Math.round(calculations.pricePerM2 || 0).toLocaleString('ru-RU')} ${currency}\n` +
            `‚Ä¢ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${(calculations.totalCost || 0).toLocaleString('ru-RU')} ${currency}</b>\n\n` +
            `üìÖ –î–∞—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞: ${new Date(result.createdAt).toLocaleDateString('ru-RU')}\n\n` +
            `üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: ${baseUrl}/calculator/${calculationId}`

          await sendMessage(chatId, message, true)

          // Send PDF if available
          if (result.url) {
            await sendDocument(chatId, `${baseUrl}${result.url}`, `–†–∞—Å—á–µ—Ç ‚Ññ${result.calculationNumber}.pdf`)
          }
        } catch (error) {
          console.error('Error fetching calculation:', error)
          await sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—á–µ—Ç–∞')
        }
      } else {
        // Regular /start without calculation
        await sendMessage(
          chatId,
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üëã\n\n` +
            `–Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤.\n\n` +
            `–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à —Ä–∞—Å—á–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏.`,
        )
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('Webhook error:', error)
    return NextResponse.json({ error: 'Failed' }, { status: 500 })
  }
}

// Helper function to send messages
async function sendMessage(chatId: number, text: string, parseHtml = false) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: parseHtml ? 'HTML' : undefined,
    }),
  })

  const result = await response.json()
  if (!result.ok) {
    console.error('Failed to send message:', result)
  }
  return result
}

// Helper function to send documents
async function sendDocument(chatId: number, documentUrl: string, caption: string) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      document: documentUrl,
      caption: caption,
    }),
  })

  return response.json()
}
